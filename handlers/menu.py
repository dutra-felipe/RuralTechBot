from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.constants import ESCOLHA, FAQ, PRODUTOS
from handlers.command import start, finalizar_atendimento


async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'start':
        return await start(update, context)
    
    if query.data == 'finalizar_atendimento':
        return await finalizar_atendimento(update, context)

    if query.data == 'produtos':
        keyboard = [
            [InlineKeyboardButton("Sensor de Umidade", callback_data='produto_sensor')],
            [InlineKeyboardButton("Drone para Mapeamento", callback_data='produto_drone')],
            [InlineKeyboardButton("Software de Gest√£o", callback_data='produto_software')],
            [InlineKeyboardButton("‚¨ÖÔ∏è Voltar ao Menu Principal", callback_data='menu_principal')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("Selecione um produto para saber mais:", reply_markup=reply_markup)
    
    elif query.data.startswith('produto_'):
        produto_id = query.data.split('_')[1]
        produto = PRODUTOS[produto_id]
        
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è Voltar aos Produtos", callback_data='produtos')],
            [InlineKeyboardButton("üì≤ Solicitar Or√ßamento", callback_data=f'orcamento_{produto_id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        produto_texto = f"*{produto['nome']}*\n\n" \
                       f"*Pre√ßo:* {produto['preco']}\n\n" \
                       f"*Descri√ß√£o:* {produto['descricao']}\n\n" \
                       f"Interessado? Clique em 'Solicitar Or√ßamento' abaixo!"
        
        await query.edit_message_text(produto_texto, reply_markup=reply_markup, parse_mode='Markdown')
    
    elif query.data.startswith('orcamento_'):
        produto_id = query.data.split('_')[1]
        context.user_data['produto_interesse'] = PRODUTOS[produto_id]['nome']
        
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data='produtos')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "Para solicitar um or√ßamento, por favor, envie seus dados atrav√©s do formul√°rio de contato.\n\n"
            "Digite /contato para iniciar o processo.",
            reply_markup=reply_markup
        )
    
    elif query.data == 'menu_principal':
        keyboard = [
            [InlineKeyboardButton("üìã Cat√°logo de Produtos", callback_data='produtos')],
            [InlineKeyboardButton("‚è∞ Hor√°rio de Atendimento", callback_data='horario')],
            [InlineKeyboardButton("üîç Sobre a Empresa", callback_data='sobre')],
            [InlineKeyboardButton("üìç Localiza√ß√£o", callback_data='endereco')],
            [InlineKeyboardButton("üì± Contato", callback_data='contato')],
            [InlineKeyboardButton("üíª Site", callback_data='site')],
            [InlineKeyboardButton("‚ùå Finalizar Atendimento", callback_data='finalizar_atendimento')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"Ol√°, {update.effective_user.first_name}! Em que posso te ajudar hoje?",
            reply_markup=reply_markup
        )
    
    elif query.data in FAQ:
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è Voltar ao Menu Principal", callback_data='menu_principal')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"{FAQ[query.data]}\n\n",
            reply_markup=reply_markup
        )
    
    return ESCOLHA